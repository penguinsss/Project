# 类方法的使用场景：想要在方法中使用类属性


class Dog:
    __count = 0  # 私有类属性     get，set方法

    def __init__(self):
        Dog.__count += 1

    # def get_count(self):
    #     return Dog.__count

    @classmethod
    def get_count(cls):  # cls实参调用者类对象
        return cls.__count


# Dog()
# d = Dog()
# print(d.get_count())

Dog()
Dog()
print(Dog.get_count())

# 1> 类属性定义：类内方法外
# 2> 类属性只能通过类对象来修改
# 3> 实例对象只能获取不能修改.
#     对象名.类属性名 = 值, 该段代码的含义是：
#        通过动态绑定的方式添加实例属性，如果该实例本身就有该属性的话就是对该实例属性进行了一个修改
# 4> 如果不希望在类外边通过类对象直接修改类属性的值，可将该类属性设为私有
#    但 这样的话，实例对象就获取不到它的值了,可通过借助方法来获取
#    但 必须要创建实例对象，通过 实例对象来调用方法获取，不想创建对象，可将方法设为类方法，类方法通过 类对象或实例对象 都可以调用
# 5> 一般类属性采用类进行调用，实例属性用实例对象来调用
# 6> 实例方法必须有实例对象才能调用


